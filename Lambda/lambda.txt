1. Stream:
	Stream是对集合的包装，通常和Lambda一起使用。
	使用Lambdas可以支持许多操作，比如：map，filter，limit，sorter，count，min，max，sum，collect等等
	同样，Stream使用“懒运算”，它们并不会真正的读取所有数据，遇到像getFirst()这样的方法就会结束链式语法。

Consumer:
	使用Lambda表达式对所有元素的某一值进行批量操作，使用Consumer<T>为集合中的所有元素创建公式。
	Consumer<Person> giveRaise = e -> e.setSalary(e.getSalary() / 100 * 5 + e.getSalary());		//创建公式
	javaProgrammer_list.forEach(giveRaise);		//forEach意为遍历所有元素，并对所有元素执行giveRaise中设置的操作
	源码：
	public interface Consumer<T> {

		//Consumer<T> consumer = e -> e.setXXX(xx);
		//以上Lambda表达式相当于实现了accept方法，执行了t.setXXX(xx);
		void accept( T t );		//定义集合中对象所要进行的操作。
		
		//嵌套执行指定操作，执行了某一操作后还需要进行下一个操作
		default Consumer<T> andThen( Consumer<? super T> after ) {
			Object.requireNonNull( after );
			return (T t) -> { accept(t); after.accept(t); };
		}
	}

Predicate:
	结合Stream中的方法filter方法，方法参数为Predicate的实例化对象
	Predicate<Person> ageFilter = (person) -> (person.getAge() > 25);	//定义一个过滤器，其后Lambda表达式为过滤条件
	javaProgrammer_list.stream().filter(ageFilter)	//通过filter方法使用过滤器
	源码：
	public interface Predicate<T> {

		//Predicate<T> predicate = p -> (p.getAge() > 20);
		//以上Lambda表达式相当于实现了test方法，相当于比较器中的compare方法
		//相当于如果t.getAge() > 20条件满足，则返回true
		boolean test(T t);

		//参数为另一个过滤器，返回同时满足两组条件的过滤器
		default Predicate<T> and(Predicate<? super T> other) {
			Objects.requireNonNull(other);
			return (t) -> test(t) && other.test(t);
		}

		//返回与其逻辑相反的过滤器
		default Predicate<T> negate() {
			return (t) -> !test(t);
		}

		//参数为另一个过滤器，返回逻辑上满足两者条件之一即可的过滤器
		default Predicate<T> or(Predicate<? super T> other) {
			Objects.requireNonNull(other);
			return (t) -> test(t) || other.test(t);
		}

		static <T> Predicate<T> isEqual(Object targetRef) {
			return (null == targetRef) ? Object::isNull : object -> targetRef.equals(object);
		}
	}	

Stream:
	public interface Stream<T> extends BaseStream<T, Stream<T>> {
		
		//？通配符类型
		//<? extends T> 表示类型的上界，表示参数化类型的可能是T或是T的子类
		//<? super T> 表示类型的下界（Java Core中叫超类型限定），表示参数化类型是此类型的超类型（父类型），直至Object
		//参数为一个过滤器，返回一个满足过滤器条件的Stream<T>
		Stream<T> filter(Predicate<? super T> predicate);


		//map是一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另外一个对象上。
		/**
		 *	例如Stream.map(Person::getFirstName)	等价于
		 *	Stream.map(new Function<Person, String>() {
		 *		public String apply(Person person) {
		 *			return person.getFirstName();
		 *		}
		 *	})
		**/
		//@param <R> The element type of the new stream
		<R> Stream<R> map(Function<? super T, ? extends R> mapper);


		//作为一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另一个Integer
		//等价于map(Function<? super T, Integer>)
		IntStream mapToInt(ToIntFunction<? super T> mapper);


		//作为一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另一个Long
		//等价于map(Function<? super T, Long>)
		LongStream mapToLong(ToLongFunction<? super T> mapper);


		//作为一个对于流对象的中间操作，通过给定的方法，它能够把流对象中的每一个元素对应到另一个Double
		//等价于map(Function<? super T, Double>)
		DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);


		<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);

		IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper);

		LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper);

		DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper);

		Stream<T> distinct();

		Stream<T> sorted();

		Stream<T> sorted(Comparator<? super T> comparator);

		Stream<T> peek(Consumer<? super T> action);

		Stream<T> limit(long maxSize);

		Stream<T> skip(long n);

		void forEach(Consumer<? super T> action);

		void forEachOrdered(Consumer<? super T> action);

		Object[] toArray();

		<A> A[] toArray(IntFunction<A[]> generator);

		T reduce(T identity, BinaryOperator<T> accumulator);

		Optional<T> reduce(BinaryOperator<T> accumulator);

		<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);

		<R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner);

		<R, A> R collect(Collector<? super T, A, R> collector);

		Optional<T> min(Comparator<? super T> comparator);

		Optional<T> max(Comparator<? super T> comparator);

		long count();

		boolean anyMatch(Predicate<? super T> predicate);

		boolean allMatch(Predicate<? super T> predicate);

		boolean noneMatch(Predicate<? super T> predicate);

		Optional<T> findFirst();

		Optional<T> findAny();

		public static<T> Builder<T> buider() {
			return new Streams.StreamBuilderImpl<>();
		}

		public static<T> Stream<T> empty() {
			return StreamSupport.stream(new Stream.StreamBuilderImpl<>(t), false);
		}

		public static<T> Stream<T> of(T t) {
			return StreamSupport.stream(new Stream.StreamBuilderImpl<>(t), false);
		}

		public static<T> Stream<T> of(T... values) {
			return Arrays.stream(values);
		}

		public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {
			Object.requireNonNull(f);
			final Iterator<T> iterator = new Iterator<T>() {
				T t = (T) Streams.NONE;

				public boolean hasNext() {
					return true;
				}
				
				public T next() {
					return t = (t == Streams.NONE) ? seed : f.apply(t);
				}
			};
			return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
								iterator, Spliterator.ORDERED | Spliterator.IMMUTABLE), false);
		}

		public static<T> Stream<T> generate(Supplier<T> s) {
			Objects.requireNonNull(s);
			return StreamSupport.stream(
						new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);
		}

		public static<T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b) {
			Objects.requireNonNull(a);
			Objects.requireNonNull(b);
			
			Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<> (
							(Spliterator<T>)a.spliterator(), (Spliterator<T>)b.spliterator());
			Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());
			return stream.onClose(Streams, composedClose(a, b));
		}

		public interface Builder<T> extends Consumer<T> {

			void accept(T t);

			default Builder<T> add(T t) {
				accept(t);
				return this;
			}

			Stream<T> build();
		}
	}
